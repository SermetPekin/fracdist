#!/usr/bin/perl

# Reads the frcapp{01,...,12}.txt and frmapp{01,...,12} and builds a C header
# including all the data.

use strict;
use warnings;

use DataParser;

my $datadir = @ARGV ? shift : ".";

my $top_q = 12;

my $frcappdata = DataParser::parse_files("$datadir/frcapp", $top_q);
my $frmappdata = DataParser::parse_files("$datadir/frmapp", $top_q);
my $bvaluesdata = DataParser::bvalues();
my $pvaluesdata = DataParser::pvalues();
my $pvalues = @DataParser::PVALUES;
my $bvalues = @DataParser::BVALUES;

my $header_file = "fracdist-data.h";
my $data_file = "fracdist-data.c";

my $header = qq!#pragma once
/** \@file $header_file
 * \@brief Header file for accessing the various fracdist data and data properties.
 *
 * This file is automatically generated when building the fracdist package.
 */

/** The number of elements in each of `fracdist_q_const' and `fracdist_q_noconst'.  Integer q values
 * from 1 to `fracdist_q_length' are available.
 */
#define fracdist_q_length $DataParser::NUM_Q

/** The length of the `fracdist_q_const[i]' array (same for `_noconst') */
#define fracdist_b_length $bvalues

/** The length of the `fracdist_pvalues' and the corresponding `fracdist_q_const[i][j]' array of
 * associated quantile values (also the same for `fracdist_q_noconst').
 */
#define fracdist_p_length $pvalues

/** The bvalues: `fracdist_bvalues[j]' is the b value corresponding to the quantiles contained in
 * `fracdist_q_const[i][j]'
 */
extern const double fracdist_bvalues[fracdist_b_length];

/** The pvalues; `fracdist_pvalues[k]' is the pvalue associated with quantile
 * `fracdist_q_const[i][j][k]'
 */
extern const double fracdist_pvalues[fracdist_p_length];

/** A double[][][] where double[x][y][z] corresponds to the quantile with `q=z+1',
 * `b=fracdist_bvalues[y]', and `pval=fracdist_pvalues[z]'.  For example, if `fracdist_bvalues[5] ==
 * 0.75' and `fracdist_pvalues[20] == 0.05' then `fracdist_quantiles[3][5][20]' is the 0.05 quantile
 * for q=4, b=0.75.  This variable is for models estimated with a constant.
 */
extern const double fracdist_q_const[fracdist_q_length][fracdist_b_length][fracdist_p_length];

/** A double[][][] where double[x][y][z] corresponds to the quantile with `q=z+1',
 * `b=fracdist_bvalues[y]', and `pval=fracdist_pvalues[z]'.  For example, if `fracdist_bvalues[5] ==
 * 0.75' and `fracdist_pvalues[20] == 0.05' then `fracdist_quantiles[3][5][20]' is the 0.05 quantile
 * for q=4, b=0.75.  This variable is for models estimated without a constant.
 */
extern const double fracdist_q_noconst[fracdist_q_length][fracdist_b_length][fracdist_p_length];
!;

my $runtime = qq!#include "$header_file"

/** \@file $data_file
 * \@brief Contains the actual fracdist data.
 *
 * This file is automatically generated when building the fracdist package.
 */

const double fracdist_bvalues[fracdist_b_length] = {\n$bvaluesdata\n};
const double fracdist_pvalues[fracdist_p_length] = {\n$pvaluesdata\n};

const double fracdist_q_const[fracdist_q_length][fracdist_b_length][fracdist_p_length] = {\n$frcappdata};

const double fracdist_q_noconst[fracdist_q_length][fracdist_b_length][fracdist_p_length] = {\n$frmappdata};
!;


open my $frac_h, '>', $header_file or die "Unable to write to $header_file: $!";
print $frac_h $header;
close $frac_h;

open my $frac_data, '>', $data_file or die "Unable to write to $data_file: $!";
print $frac_data $runtime;
close $frac_data;
