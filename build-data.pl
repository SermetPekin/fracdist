#!/usr/bin/perl

# Reads the frcapp{01,...,12}.txt and frmapp{01,...,12} and builds a C header
# including all the data.

use strict;
use warnings;

use DataParser;

my $datadir = @ARGV ? shift : ".";

my $top_q = 12;

my $frcappdata = DataParser::parse_files("$datadir/frcapp", $top_q);
my $frmappdata = DataParser::parse_files("$datadir/frmapp", $top_q);
my $bvaluesdata = DataParser::bvalues();
my $pvaluesdata = DataParser::pvalues();
my $pvalues = @DataParser::PVALUES;
my $bvalues = @DataParser::BVALUES;

my $header_dir = "fracdist";
my $header_file = "fracdist/data.hpp";
my $data_file = "fracdist/data.cpp";

my $header = qq!#pragma once
#include <cstdlib>
#include <array>
/** \@file $header_file
 * \@brief Header file for accessing the various fracdist data and data properties.
 *
 * This file is automatically generated when building the fracdist package.
 */

namespace fracdist {

constexpr size_t
    q_length = $DataParser::NUM_Q,
    b_length = $bvalues,
    p_length = $pvalues;


/** The bvalues: `bvalues[j]' is the b value corresponding to the quantiles contained in
 * `q_const[i][j]'
 */
extern const std::array<double, b_length> bvalues;

/** The pvalues; `pvalues[k]' is the pvalue associated with quantile
 * `q_const[i][j][k]'
 */
extern const std::array<double, p_length> pvalues;

/** A double[][][] (wrapped in std::array's) where double[x][y][z] corresponds to the quantile with
`q=z+1', `b=bvalues[y]', and `pval=pvalues[z]'.  For example, if `bvalues[5] == 0.75' and
`pvalues[20] == 0.05' then `quantiles[3][5][20]' is the 0.05 quantile * for q=4, b=0.75.  This
variable is for models estimated with a constant.
*/
extern const std::array<const std::array<const std::array<double, p_length>, b_length>, q_length> q_const;

/** A double[][][] (wrapped in std::array's) where double[x][y][z] corresponds to the quantile with
`q=z+1', `b=bvalues[y]', and `pval=pvalues[z]'.  For example, if `bvalues[5] == 0.75' and
`pvalues[20] == 0.05' then `quantiles[3][5][20]' is the 0.05 quantile for q=4, b=0.75.  This
variable is for models estimated without a constant.
*/
extern const std::array<const std::array<const std::array<double, p_length>, b_length>, q_length> q_noconst;

}!;

my $runtime = qq!#include "$header_file"

namespace fracdist {
/** \@file $data_file
 * \@brief Contains the actual fracdist data.
 *
 * This file is automatically generated when building the fracdist package.
 */

const std::array<double, b_length> bvalues {{\n$bvaluesdata\n}};

const std::array<double, p_length> pvalues {{\n$pvaluesdata\n}};

const std::array<const std::array<const std::array<double, p_length>, b_length>, q_length> q_const {{\n$frcappdata}};

const std::array<const std::array<const std::array<double, p_length>, b_length>, q_length> q_noconst {{\n$frmappdata}};

};

!;

if (!-d $header_dir) {
    mkdir $header_dir or die "Unable to mkdir($header_dir): $!";
}

open my $frac_h, '>', $header_file or die "Unable to write to $header_file: $!";
print $frac_h $header;
close $frac_h;

open my $frac_data, '>', $data_file or die "Unable to write to $data_file: $!";
print $frac_data $runtime;
close $frac_data;
